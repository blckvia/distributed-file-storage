// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.3
// source: distributedStorage.proto

package distributedStoragev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DistributedStorageClient is the client API for DistributedStorage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DistributedStorageClient interface {
	Getfile(ctx context.Context, in *GetfileRequest, opts ...grpc.CallOption) (*GetfileResponse, error)
	Upload(ctx context.Context, opts ...grpc.CallOption) (DistributedStorage_UploadClient, error)
}

type distributedStorageClient struct {
	cc grpc.ClientConnInterface
}

func NewDistributedStorageClient(cc grpc.ClientConnInterface) DistributedStorageClient {
	return &distributedStorageClient{cc}
}

func (c *distributedStorageClient) Getfile(ctx context.Context, in *GetfileRequest, opts ...grpc.CallOption) (*GetfileResponse, error) {
	out := new(GetfileResponse)
	err := c.cc.Invoke(ctx, "/distributedStorage.DistributedStorage/Getfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributedStorageClient) Upload(ctx context.Context, opts ...grpc.CallOption) (DistributedStorage_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &DistributedStorage_ServiceDesc.Streams[0], "/distributedStorage.DistributedStorage/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &distributedStorageUploadClient{stream}
	return x, nil
}

type DistributedStorage_UploadClient interface {
	Send(*UploadRequest) error
	CloseAndRecv() (*UploadResponse, error)
	grpc.ClientStream
}

type distributedStorageUploadClient struct {
	grpc.ClientStream
}

func (x *distributedStorageUploadClient) Send(m *UploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *distributedStorageUploadClient) CloseAndRecv() (*UploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DistributedStorageServer is the server API for DistributedStorage service.
// All implementations must embed UnimplementedDistributedStorageServer
// for forward compatibility
type DistributedStorageServer interface {
	Getfile(context.Context, *GetfileRequest) (*GetfileResponse, error)
	Upload(DistributedStorage_UploadServer) error
	mustEmbedUnimplementedDistributedStorageServer()
}

// UnimplementedDistributedStorageServer must be embedded to have forward compatible implementations.
type UnimplementedDistributedStorageServer struct {
}

func (UnimplementedDistributedStorageServer) Getfile(context.Context, *GetfileRequest) (*GetfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Getfile not implemented")
}
func (UnimplementedDistributedStorageServer) Upload(DistributedStorage_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedDistributedStorageServer) mustEmbedUnimplementedDistributedStorageServer() {}

// UnsafeDistributedStorageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DistributedStorageServer will
// result in compilation errors.
type UnsafeDistributedStorageServer interface {
	mustEmbedUnimplementedDistributedStorageServer()
}

func RegisterDistributedStorageServer(s grpc.ServiceRegistrar, srv DistributedStorageServer) {
	s.RegisterService(&DistributedStorage_ServiceDesc, srv)
}

func _DistributedStorage_Getfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedStorageServer).Getfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/distributedStorage.DistributedStorage/Getfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedStorageServer).Getfile(ctx, req.(*GetfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributedStorage_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DistributedStorageServer).Upload(&distributedStorageUploadServer{stream})
}

type DistributedStorage_UploadServer interface {
	SendAndClose(*UploadResponse) error
	Recv() (*UploadRequest, error)
	grpc.ServerStream
}

type distributedStorageUploadServer struct {
	grpc.ServerStream
}

func (x *distributedStorageUploadServer) SendAndClose(m *UploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *distributedStorageUploadServer) Recv() (*UploadRequest, error) {
	m := new(UploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DistributedStorage_ServiceDesc is the grpc.ServiceDesc for DistributedStorage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DistributedStorage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "distributedStorage.DistributedStorage",
	HandlerType: (*DistributedStorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Getfile",
			Handler:    _DistributedStorage_Getfile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _DistributedStorage_Upload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "distributedStorage.proto",
}
